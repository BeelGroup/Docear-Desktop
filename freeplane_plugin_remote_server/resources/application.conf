defaultAkkaRemoteOptions = {
    actor.provider = "akka.remote.RemoteActorRefProvider"
    remote.transport = "akka.remote.netty.NettyRemoteTransport"
    remote.netty.message-frame-size = 100 MiB
    remote.netty.hostname = "127.0.0.1"
}

listener {
    akka=${defaultAkkaRemoteOptions}
    akka.remote.netty.port = 2553
}

akka {
    actor {
      serializers {
        java = "akka.serialization.JavaSerializer"
        proto = "akka.remote.serialization.ProtobufSerializer"
      }
 
      serialization-bindings {
        "java.lang.String" = java
        "docs.serialization.Customer" = java
        "com.google.protobuf.Message" = proto
        "java.lang.Boolean" = myown
      }
    }
}

actor {
    default-dispatcher {
  
	  # Dispatcher is the name of the event-based dispatcher
	  type = Dispatcher
	  # What kind of ExecutionService to use
	  executor = "thread-pool-executor"
	  # Configuration for the thread pool
	  thread-pool-executor {
	    # minimum number of threads to cap factor-based core number to
	    core-pool-size-min = 1
	    # No of core threads ... ceil(available processors * factor)
	    core-pool-size-factor = 1.0
	    # maximum number of threads to cap factor-based number to
	    core-pool-size-max = 1
	  }
	  # Throughput defines the maximum number of messages to be
	  # processed per actor before the thread jumps to the next actor.
	  # Set to 1 for as fair as possible.
	  throughput = 100
	}
}